
/* Plan:
 - Create multi-module repo:
   - fit (deps: common)
   - slim (deps: common, networking)
   - common
   - networking
   - ant
   - fitnesse, the wiki server
 - Move file creation to plugin
*/

plugins {
  id 'java' // or 'groovy' Must be explicitly applied
  id "maven-publish"
  id 'com.github.johnrengelman.shadow' version '1.2.3'
  id "com.jfrog.bintray" version "1.6"
}

version = new Date().format('yyyyMMdd')

println "Building FitNesse v${project.version}..."

repositories {
  mavenCentral()
}

configurations {
  optional
  lesscss
  compile {
    transitive = false
  }
  runtime {
    transitive = false
  }
}

sourceSets {
  main {
    java.srcDir 'src'
    resources.srcDir 'src'
    output.classesDir 'classes'
    compileClasspath += configurations.optional
  }
  test {
    java.srcDir 'test'
    output.classesDir 'test-classes'
  }
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

dependencies {
  compile "org.htmlparser:htmlparser:2.1"
  compile "org.htmlparser:htmllexer:2.1"
  compile "org.apache.velocity:velocity:1.7"
  compile "commons-lang:commons-lang:2.6"
  compile "commons-collections:commons-collections:3.2.2"
  compile "org.json:json:20151123"
  compile "com.googlecode.java-diff-utils:diffutils:1.3.0"
  optional "org.apache.ant:ant:1.9.6"
  optional "junit:junit:4.12"

  testCompile "junit:junit:4.12"
  testCompile "org.mockito:mockito-core:1.10.19"
  testCompile "org.hamcrest:hamcrest-all:1.3"
  testCompile "net.javacrumbs.json-unit:json-unit:1.1.6"

  lesscss "org.mozilla:rhino:1.7.7.1"
}

task fitNesseVersion {
  def versionFile = new File("classes/META-INF/FitNesseVersion.txt")
  versionFile.parentFile.mkdirs()
  versionFile.text="v${version}"
}

task compileBootstrap(type: JavaExec) {
  new File("classes/fitnesse/resources/bootstrap/css").mkdirs()
  classpath configurations.lesscss
  main "org.mozilla.javascript.tools.shell.Main"
  args "extra/lesscss/less-rhino-1.7.0.js", "src/fitnesse/resources/bootstrap/less/fitnesse-bootstrap.less"
  standardOutput = new File("classes/fitnesse/resources/bootstrap/css/fitnesse-bootstrap.css").newOutputStream()
}

// TODO: convert this code to a plugin.
task createUpdateLists(type: JavaExec) {
  new File("classes/Resources").mkdirs()
  classpath sourceSets.main.runtimeClasspath
  main "fitnesse.updates.UpdateFileList"
  args "-baseDirectory:.",
    "-outputDirectory:classes/Resources",
    "-doNotReplace:FitNesseRoot/FrontPage/content.txt",
    "-doNotReplace:FitNesseRoot/FrontPage/properties.xml",
    "-doNotReplace:FitNesseRoot/PageHeader/content.txt",
    "-doNotReplace:FitNesseRoot/PageHeader/properties.xml",
    "-doNotReplace:FitNesseRoot/PageFooter/content.txt",
    "-doNotReplace:FitNesseRoot/PageFooter/properties.xml",
    "-doNotReplace:FitNesseRoot/PageFooter/properties.xml",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/content.txt",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/properties.xml",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/StaticPage/content.txt",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/StaticPage/properties.xml",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/SuitePage/content.txt",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/SuitePage/properties.xml",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/TestPage/content.txt",
    "-doNotReplace:FitNesseRoot/TemplateLibrary/TestPage/properties.xml",
    "FitNesseRoot/FitNesse",
    "FitNesseRoot/FrontPage",
    "FitNesseRoot/PageFooter",
    "FitNesseRoot/PageHeader",
    "FitNesseRoot/TemplateLibrary"
}

processResources {
  dependsOn "fitNesseVersion", "compileBootstrap"
  from('src') {
    include '**/*.properties'
    include 'fitnesse/resources/**'
  }
  into "classes"
}


task run(type: JavaExec) {
  dependsOn compileJava, processResources, "createUpdateLists"
  classpath = sourceSets.main.runtimeClasspath
  main "fitnesseMain.FitNesseMain"
  args "-p", "8001", "-e", "0"
}

task intTest(type: JavaExec) {
  dependsOn compileJava, processResources, "createUpdateLists"
  mustRunAfter test
  classpath = sourceSets.main.runtimeClasspath
  main "fitnesseMain.FitNesseMain"
  args "-c", "FitNesse.SuiteAcceptanceTests?suite&format=text"
}

check.dependsOn intTest

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

shadowJar {
  classifier = 'standalone'
  exclude 'META-INF/**'
}

artifacts {
  archives javadocJar, sourcesJar, shadowJar
}

publishing {
  publications {
    FitNesseRelease(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      artifact shadowJar
      groupId 'org.fitnesse'
      artifactId 'fitnesse'
      pom.withXml {
        asNode().get('version') + { url('http://fitnesse.org') }
        asNode().appendNode('description', 'The fully integrated standalone wiki, and acceptance testing framework.')
        asNode().append(pomLicenses())
        asNode().append(pomScm())
        asNode().append(pomDevelopers())

        // Clean up scope entries added by the pom generator:
        asNode().dependencies.'*'.findAll() {
          if (it.scope.text() == 'runtime') {
            it.remove(it.scope)
          }
        }
      }
    }
  }
}

bintray {
  user = 'amolenaar'
  key = 'ca5334354c60461c65afe5c2d86e23a12d317f3a'
  publications = ['FitNesseRelease']
  publish = true
  pkg {
    repo = 'release'
    name = 'fitnesse'
    userOrg = 'fitnesse'
    licenses = ['CPL-1.0']
    websiteUrl = 'http://fitnesse.org'
    vcsUrl = 'https://github.com/unclebob/fitnesse.git'
    publicDownloadNumbers = true
    githubRepo = 'unclebob/fitnesse'
    version {
      name = project.version
      desc = "FitNesse release ${project.version}"
      vcsTag = project.version
      gpg {
        sign = true
      }
    }
  }
}

wrapper {
  gradleVersion = '2.13'
}

def pomLicenses() {
  new NodeBuilder().licenses {
    license {
      name 'Common Public License version 1.0'
      url 'http://www.opensource.org/licenses/cpl1.0'
      distribution 'repo'
    }
  }
}

def pomScm() {
  new NodeBuilder().scm {
    connection 'scm:git:git://github.com/unclebob/fitnesse.git'
    developerConnection 'scm:git:git@github.com:unclebob/fitnesse.git'
    url 'scm:git:http://github.com/unclebob/fitnesse'
  }
}

def pomDevelopers() {
  new NodeBuilder().developers {
    developer {
      id 'unclebob'
      name 'Robert C. Martin'
      email 'unclebob@cleancoder.com'
    }
  }
}
